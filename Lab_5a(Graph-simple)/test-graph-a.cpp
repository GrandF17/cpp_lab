#include "graph-a.h"

using namespace std;

int main() {
    vector<vector<int>> adjacency_list{
        /*0 --> */ {1, 3},
        /*1 --> */ {0, 5, 6},
        /*2 --> */ {6},
        /*3 --> */ {0, 4},
        /*4 --> */ {3, 7},
        /*5 --> */ {1, 6},
        /*6 --> */ {1, 2, 5},
        /*7 --> */ {4}
    };

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
    cout << "Breadth-first search algo:" << endl;
    bfs_list(adjacency_list);
    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
    const int n = 8;
    vector<int> used(n);
    cout << "\n\nDepth-first search algo:" << endl;
    dfs_list(adjacency_list, used, 0);
    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
    vector<vector<pair<int, int>>> graph {
        /*0 --> */{{1/*number of vertex*/, 10/*weight*/}, {5, 5}}, 
        /*1 --> */{{0, 10}, {2, 1}}, 
        /*2 --> */{{1, 1}, {3, 5}, {5, 7}, {6, 10}}, 
        /*3 --> */{{2, 5}, {4, 1}}, 
        /*4 --> */{{3, 1}, {6, 2}}, 
        /*5 --> */{{0, 5}, {2, 7}, {6, 100}, {7, 3}}, 
        /*6 --> */{{2, 10}, {4, 2}, {5, 100}, {7, 8}, {8, 100}}, 
        /*7 --> */{{5, 3}, {6, 8}, {9, 1}},
        /*8 --> */{{6, 100}, {9, 1}},
        /*9 --> */{{7, 1}, {8, 1}}
    };

    vector<int> dist = dijkstra(graph, 0);

    cout << "\n\nDijkstra algo:" << endl;
    for(int i = 0; i < dist.size(); i++) {
        cout << dist[i] << " ";
    }
    
    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_

    cout << "\n\nFloyd warshall algo:" << endl;
    floyd_warshall(graph);

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
    
    cout << "\n\nMin tree weight (by Prima algo): \n" << prima(graph) << endl;
    
    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_    

    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
    
    // vector<vector<pair<int, int>>> edges {
    //     /*0 --> */{{1, 5}, {2, 9}, {4, 1}, {5, 3}}, 
    //     /*1 --> */{{0, 5}, {3, 8}, {5, 3}}, 
    //     /*2 --> */{{0, 9}, {4, 4}}, 
    //     /*3 --> */{{1, 8}, {5, 7}}, 
    //     /*4 --> */{{0, 1}, {2, 4}, {5, 2}}, 
    //     /*5 --> */{{0, 3}, {1, 3}, {3, 7}, {4, 2}}
    // };

    // vector<edge> edges{
    //     {1, 2, 5},
    //     {1, 3, 9},
    //     {1, 5, 1},
    //     {1, 6, 3},
    //     {2, 4, 8},
    //     {2, 6, 3},
    //     {3, 5, 4},
    //     {4, 6, 7},
    //     {5, 6, 2}
    // };

    cout << "\n\nMin tree weight (by Kruskal algo): \n" << kruskal(graph) << endl;
    //-_-_-_-_-_-_-_-_-_-_-_-_-_-_
}